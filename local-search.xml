<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>gorm的介绍和使用</title>
    <link href="/2024/12/06/gorm%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <url>/2024/12/06/gorm%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p>gorm是golang的orm框架，十分的方便，具体的内容介绍， <a href="https://gorm.io/zh_CN/">链接</a></p><h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">go get -u gorm.io/gorm<br>go get -u gorm.io/driver/sqlite <span class="hljs-comment"># 以sqlite数据库为例</span><br></code></pre></td></tr></table></figure><blockquote><p>如果使用的是sqlite数据库为例的话，则还需要配一些东西</p></blockquote><h3 id="2-1-开启golang的相关变量"><a href="#2-1-开启golang的相关变量" class="headerlink" title="2.1 开启golang的相关变量"></a>2.1 开启golang的相关变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">go <span class="hljs-built_in">env</span> -w CGO_ENABLED=1<br></code></pre></td></tr></table></figure><h3 id="2-2-下载gcc工具并且设置相关环境变量"><a href="#2-2-下载gcc工具并且设置相关环境变量" class="headerlink" title="2.2 下载gcc工具并且设置相关环境变量"></a>2.2 下载gcc工具并且设置相关环境变量</h3><p>下载地址：<a href="https://github.com/niXman/mingw-builds-binaries/releases">地址</a>， 然后解压之后把bin目录放到path环境变量中</p><h2 id="三、使用说明"><a href="#三、使用说明" class="headerlink" title="三、使用说明"></a>三、使用说明</h2><h3 id="3-1-简单用例"><a href="#3-1-简单用例" class="headerlink" title="3.1 简单用例"></a>3.1 简单用例</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;gorm.io/driver/sqlite&quot;</span><br><span class="hljs-string">&quot;gorm.io/gorm&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;<br>Id      <span class="hljs-type">int</span>    <span class="hljs-string">`gorm:&quot;primaryKey;column:n_id;autoIncrement&quot;`</span><br>Name    <span class="hljs-type">string</span> <span class="hljs-string">`gorm:&quot;column:s_name;&quot;`</span><br>Age     <span class="hljs-type">int</span>    <span class="hljs-string">`gorm:&quot;not null;column:n_age&quot;`</span><br>Address <span class="hljs-type">string</span> <span class="hljs-string">`gorm:&quot;not null;column:s_address&quot;`</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(u *User)</span></span> TableName() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;t_user_info&quot;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>db, _ := gorm.Open(sqlite.Open(<span class="hljs-string">&quot;test.db&quot;</span>), &amp;gorm.Config&#123;&#125;)<br>db.AutoMigrate(&amp;User&#123;&#125;)<br><br><span class="hljs-comment">// 增</span><br>u := User&#123;<br>Name:    <span class="hljs-string">&quot;张三&quot;</span>,<br>Age:     <span class="hljs-number">33</span>,<br>Address: <span class="hljs-string">&quot;广东省&quot;</span>,<br>&#125;<br>db.Save(&amp;u)<br><span class="hljs-comment">// 或者可以使用db.Create(&amp;u)</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-2-查询的使用"><a href="#3-2-查询的使用" class="headerlink" title="3.2 查询的使用"></a>3.2 查询的使用</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> u User<br><span class="hljs-keyword">var</span> users []User<br><span class="hljs-comment">// 查询第一条， 按照主键排序</span><br>db.First(&amp;u)<br><br><span class="hljs-comment">// 查询最后一条，按照主键排序</span><br>db.Last(&amp;u)<br><br><span class="hljs-comment">// 查询一条</span><br>db.Take(&amp;u)<br><br><span class="hljs-comment">// 查询多笔数据</span><br>db.Find(&amp;users)<br><br><span class="hljs-comment">// 带有条件的查询</span><br>db.Where(<span class="hljs-string">&quot;s_name = ?&quot;</span>, <span class="hljs-string">&quot;张三&quot;</span>).Find(&amp;users)<br><br>db.Where(<span class="hljs-string">&quot;s_name &lt;&gt; ?&quot;</span>, <span class="hljs-string">&quot;安森&quot;</span>).Take(&amp;u)<br><br>db.Where(<span class="hljs-string">&quot;s_name in ?&quot;</span>, []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-string">&quot;王五&quot;</span>&#125;).Find(&amp;u)<br><br>db.Where(<span class="hljs-string">&quot;s_name = ?&quot;</span>, <span class="hljs-string">&quot;测试&quot;</span>).Or(<span class="hljs-string">&quot;n_age &lt;= ?&quot;</span>, <span class="hljs-number">22</span>).Find(&amp;u)<br><br>db.Raw(<span class="hljs-string">&quot;select * from t_user_info where s_name = ?&quot;</span>, <span class="hljs-string">&quot;张三&quot;</span>).Scan(&amp;users)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python一些的方法golang实现（待补充）</title>
    <link href="/2024/03/19/python%E4%B8%80%E4%BA%9B%E7%9A%84%E6%96%B9%E6%B3%95golang%E5%AE%9E%E7%8E%B0/"/>
    <url>/2024/03/19/python%E4%B8%80%E4%BA%9B%E7%9A%84%E6%96%B9%E6%B3%95golang%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>在实际开发中，python的有些方法十分好用，但是golang自己没有，得自己实现</p></blockquote><h1 id="1-max函数和min函数"><a href="#1-max函数和min函数" class="headerlink" title="1. max函数和min函数"></a>1. max函数和min函数</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">customMax</span>[<span class="hljs-title">T</span> <span class="hljs-title">int</span>|<span class="hljs-title">float64</span>] <span class="hljs-params">(arr []T)</span></span> T &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(arr) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;arr is empty!!!&quot;</span>)<br>    &#125;<br>ret := arr[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">for</span> _, item := <span class="hljs-keyword">range</span> arr &#123;<br><span class="hljs-keyword">if</span> item &gt; ret &#123;<br>ret = item<br>        &#125;<br>    &#125;<br><span class="hljs-keyword">return</span> ret<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">customMin</span>[<span class="hljs-title">T</span> <span class="hljs-title">int</span>|<span class="hljs-title">float64</span>] <span class="hljs-params">(arr []T)</span></span> T &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(arr) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;arr is empty!!!&quot;</span>)<br>&#125;<br>ret := arr[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">for</span> _, item := <span class="hljs-keyword">range</span> arr &#123;<br><span class="hljs-keyword">if</span> item &lt; ret &#123;<br>ret = item<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> ret<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="2-python的collection的Counter函数"><a href="#2-python的collection的Counter函数" class="headerlink" title="2. python的collection的Counter函数"></a>2. python的collection的Counter函数</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">customCounter</span>[<span class="hljs-title">T</span> <span class="hljs-title">int</span>|<span class="hljs-title">string</span>]<span class="hljs-params">(arr []T)</span></span> <span class="hljs-keyword">map</span>[T]<span class="hljs-type">int</span> &#123;<br>ret := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[T]<span class="hljs-type">int</span>)<br><span class="hljs-keyword">for</span> _, key := <span class="hljs-keyword">range</span> arr &#123;<br><span class="hljs-keyword">if</span> _, ok := ret[key]; ok &#123;<br>ret[key] += <span class="hljs-number">1</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>ret[key] = <span class="hljs-number">1</span><br>        &#125;<br>    &#125;<br><span class="hljs-keyword">return</span> ret<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3-python的map函数"><a href="#3-python的map函数" class="headerlink" title="3. python的map函数"></a>3. python的map函数</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">customMap</span>[<span class="hljs-title">T</span> <span class="hljs-title">any</span>]<span class="hljs-params">(arr []T, f <span class="hljs-keyword">func</span>(T)</span></span> any) []any &#123;<br>ret := <span class="hljs-built_in">make</span>([]any, <span class="hljs-number">0</span>)<br><span class="hljs-keyword">for</span> _, item := <span class="hljs-keyword">range</span> arr &#123;<br>r := f(item)<br>ret = <span class="hljs-built_in">append</span>(ret, r)<br>    &#125;<br><span class="hljs-keyword">return</span> ret<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="4-python的组合和排序itertools的combinations和permutations"><a href="#4-python的组合和排序itertools的combinations和permutations" class="headerlink" title="4. python的组合和排序itertools的combinations和permutations"></a>4. python的组合和排序itertools的combinations和permutations</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">combinations</span>[<span class="hljs-title">T</span> <span class="hljs-title">string</span> | <span class="hljs-title">int</span>]<span class="hljs-params">(arr []T, length <span class="hljs-type">int</span>)</span></span> [][]T &#123;<br>ret := <span class="hljs-built_in">make</span>([][]T, <span class="hljs-number">0</span>)<br><span class="hljs-keyword">if</span> length &gt; <span class="hljs-built_in">len</span>(arr) &#123;<br><span class="hljs-keyword">return</span> ret<br>&#125;<br><br><span class="hljs-keyword">var</span> dfs <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(curIndex <span class="hljs-type">int</span>, usedIndex []<span class="hljs-type">int</span>)</span></span><br>dfs = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(curIndex <span class="hljs-type">int</span>, usedIndex []<span class="hljs-type">int</span>)</span></span> &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(usedIndex) == length &#123;<br>t := <span class="hljs-built_in">make</span>([]T, <span class="hljs-number">0</span>)<br><span class="hljs-keyword">for</span> _, i := <span class="hljs-keyword">range</span> usedIndex &#123;<br>t = <span class="hljs-built_in">append</span>(t, arr[i])<br>&#125;<br>ret = <span class="hljs-built_in">append</span>(ret, t)<br><span class="hljs-keyword">return</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 提前剪枝</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(arr)<span class="hljs-number">-1</span>-curIndex &lt; length-<span class="hljs-built_in">len</span>(usedIndex) &#123;<br><span class="hljs-keyword">return</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">for</span> i := curIndex; i &lt; <span class="hljs-built_in">len</span>(arr); i++ &#123;<br><span class="hljs-keyword">if</span> !inArr[T](i, usedIndex) &#123;<br>tmp := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-built_in">len</span>(usedIndex))<br><span class="hljs-built_in">copy</span>(tmp, usedIndex)<br>tmp = <span class="hljs-built_in">append</span>(tmp, i)<br>dfs(i, tmp)<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br>dfs(<span class="hljs-number">0</span>, []<span class="hljs-type">int</span>&#123;&#125;)<br><span class="hljs-keyword">return</span> ret<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">inArr</span>[<span class="hljs-title">T</span> <span class="hljs-title">int</span> | <span class="hljs-title">string</span>]<span class="hljs-params">(s T, arr []T)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">for</span> _, item := <span class="hljs-keyword">range</span> arr &#123;<br><span class="hljs-keyword">if</span> item == s &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">permutations</span>[<span class="hljs-title">T</span> <span class="hljs-title">int</span> | <span class="hljs-title">string</span>]<span class="hljs-params">(arr []T, length <span class="hljs-type">int</span>)</span></span> [][]T &#123;<br>ret := <span class="hljs-built_in">make</span>([][]T, <span class="hljs-number">0</span>)<br><span class="hljs-keyword">if</span> length &gt; <span class="hljs-built_in">len</span>(arr) &#123;<br><span class="hljs-keyword">return</span> ret<br>&#125;<br><br><span class="hljs-keyword">var</span> dfs <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(usedIndex []<span class="hljs-type">int</span>)</span></span><br>dfs = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(usedIndex []<span class="hljs-type">int</span>)</span></span> &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(usedIndex) == length &#123;<br>t := <span class="hljs-built_in">make</span>([]T, <span class="hljs-number">0</span>)<br><span class="hljs-keyword">for</span> _, i := <span class="hljs-keyword">range</span> usedIndex &#123;<br>t = <span class="hljs-built_in">append</span>(t, arr[i])<br>&#125;<br>ret = <span class="hljs-built_in">append</span>(ret, t)<br><span class="hljs-keyword">return</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(arr); i++ &#123;<br><span class="hljs-keyword">if</span> !inArr[T](i, usedIndex) &#123;<br>tmp := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-built_in">len</span>(usedIndex))<br><span class="hljs-built_in">copy</span>(tmp, usedIndex)<br>tmp = <span class="hljs-built_in">append</span>(tmp, i)<br>dfs(tmp)<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br>dfs([]<span class="hljs-type">int</span>&#123;&#125;)<br><span class="hljs-keyword">return</span> ret<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="5-优先队列的实现"><a href="#5-优先队列的实现" class="headerlink" title="5. 优先队列的实现"></a>5. 优先队列的实现</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// python直接导包即可， from queue import PriorityQueue</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">type</span> qqq <span class="hljs-keyword">struct</span> &#123;<br>arr []<span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(q *qqq)</span></span> put(num <span class="hljs-type">int</span>) &#123;<br><span class="hljs-comment">// 从小到大的顺序插入进去</span><br>index := Bs(q.arr, num)<br><span class="hljs-keyword">if</span> index &gt;= <span class="hljs-built_in">len</span>(q.arr) &#123;<br><span class="hljs-comment">// 直接插到最后一个数位</span><br>q.arr = <span class="hljs-built_in">append</span>(q.arr, num)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>tmp := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-built_in">len</span>(q.arr)+<span class="hljs-number">1</span>)<br>tmp[index] = num<br><span class="hljs-built_in">copy</span>(tmp[:index], q.arr[:index])<br><span class="hljs-built_in">copy</span>(tmp[index+<span class="hljs-number">1</span>:], q.arr[index:])<br>q.arr = tmp<br>&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(q *qqq)</span></span> get() <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(q.arr) &gt; <span class="hljs-number">0</span> &#123;<br>num := q.arr[<span class="hljs-number">0</span>]<br>q.arr = q.arr[<span class="hljs-number">1</span>:]<br><span class="hljs-keyword">return</span> num<br>&#125;<br><span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;arr is empty!!!&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(q *qqq)</span></span> getSize() <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(q.arr)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Bs</span><span class="hljs-params">(arr []<span class="hljs-type">int</span>, target_num <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(arr) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>left, right := <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(arr)<span class="hljs-number">-1</span><br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">if</span> right-left &lt;= <span class="hljs-number">1</span> &#123;<br><span class="hljs-keyword">if</span> target_num &lt;= arr[left] &#123;<br><span class="hljs-keyword">return</span> left<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> target_num &lt;= arr[right] &#123;<br><span class="hljs-keyword">return</span> right<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> right + <span class="hljs-number">1</span><br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>mid := (left + right) / <span class="hljs-number">2</span><br><span class="hljs-keyword">if</span> arr[mid] == target_num &#123;<br><span class="hljs-keyword">return</span> mid<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> arr[mid] &lt; target_num &#123;<br>left = mid<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>right = mid<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>golang</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>golang中经常使用的基础知识</title>
    <link href="/2024/03/17/golang%E7%BB%8F%E5%B8%B8%E4%BD%BF%E7%94%A8%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2024/03/17/golang%E7%BB%8F%E5%B8%B8%E4%BD%BF%E7%94%A8%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="1-map的排序"><a href="#1-map的排序" class="headerlink" title="1. map的排序"></a>1. map的排序</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 基本上的思路是把 map 变成结构体， 然后使用sort.Slice的匿名函数的方式来排序</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;sort&quot;</span><br><br><span class="hljs-keyword">type</span> StudentScores <span class="hljs-keyword">struct</span> &#123;<br>name  <span class="hljs-type">string</span><br>scoreInt <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>score := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>)<br>score[<span class="hljs-string">&quot;Jack&quot;</span>] = <span class="hljs-number">200</span><br>score[<span class="hljs-string">&quot;Tom&quot;</span>] = <span class="hljs-number">211</span><br>score[<span class="hljs-string">&quot;Pony&quot;</span>] = <span class="hljs-number">12342</span><br><br>scoreArr := <span class="hljs-built_in">make</span>([]*StudentScores, <span class="hljs-number">0</span>)<br><span class="hljs-keyword">for</span> name, s := <span class="hljs-keyword">range</span> score &#123;<br>scoreArr = <span class="hljs-built_in">append</span>(scoreArr, &amp;StudentScores&#123;<br>name: name,<br>scoreInt: s,<br>&#125;)<br>&#125;<br><span class="hljs-comment">// 比如使用降序</span><br>sort.Slice(scoreArr, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(i, j <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br>        <span class="hljs-keyword">return</span> scoreArr[i].scoreInt &gt; scoreArr[j].scoreInt<br>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="2-常见的获取输入的方法"><a href="#2-常见的获取输入的方法" class="headerlink" title="2. 常见的获取输入的方法"></a>2. 常见的获取输入的方法</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;os&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>scanner := bufio.NewScanner(os.Stdin)<br><span class="hljs-keyword">for</span> scanner.Scan() &#123;<br>input := scanner.Text()<br><span class="hljs-keyword">if</span> input == <span class="hljs-string">&quot;&quot;</span> &#123;<br><span class="hljs-keyword">break</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// do something</span><br><span class="hljs-keyword">continue</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3-正则的使用"><a href="#3-正则的使用" class="headerlink" title="3. 正则的使用"></a>3. 正则的使用</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 匹配非数字字母的任意数据</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;regexp&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">if</span> ok, _ := regexp.MatchString(<span class="hljs-string">&quot;[^a-zA-Z0-9]&quot;</span>, <span class="hljs-string">&quot;adjfj@@$jfkdsfjd&quot;</span>); ok &#123;<br>fmt.Println(<span class="hljs-string">&quot;找到了匹配&quot;</span>)<br>&#125;<br><br>pattern := regexp.MustCompile(<span class="hljs-string">&quot;\\d+&quot;</span>)<br>res := pattern.FindAllString(<span class="hljs-string">&quot;11adjfj@@22$jfkdsfjd33&quot;</span>, <span class="hljs-number">-1</span>)<br>    fmt.Println(res)    <span class="hljs-comment">// [11, 22, 33]</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《二叉树的遍历方法》</title>
    <link href="/2024/01/31/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86%E6%96%B9%E6%B3%95/"/>
    <url>/2024/01/31/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="1-二叉树的前序遍历"><a href="#1-二叉树的前序遍历" class="headerlink" title="1 二叉树的前序遍历"></a>1 二叉树的前序遍历</h1><p><strong>前序遍历的概念，即遍历的顺序是先根节点，然后左节点，然后右节点的遍历顺序</strong></p><ul><li><p>python版本的代码实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Optional</span>, <span class="hljs-type">List</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, val: <span class="hljs-built_in">int</span></span>):<br>        self.val = val<br>        self.left: <span class="hljs-type">Optional</span>[TreeNode] = <span class="hljs-literal">None</span><br>        self.right: <span class="hljs-type">Optional</span>[TreeNode] = <span class="hljs-literal">None</span><br><br><span class="hljs-comment"># 递归算法的实现</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">front_ergodic</span>(<span class="hljs-params">root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>    <span class="hljs-keyword">if</span> root <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> []<br>    <span class="hljs-keyword">return</span> [root.val] + front_ergodic(root.left) + front_ergodic(root.right)<br>    <br><br><span class="hljs-comment"># 非递归算法实现</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">front_ergodic_no_recursion</span>(<span class="hljs-params">root: TreeNode</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>    ret = []<br>    stack = [root]<br>    <span class="hljs-keyword">while</span> stack:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> stack:<br>            <span class="hljs-keyword">break</span><br>        cur_node = stack.pop()<br>        ret.append(cur_node.val)<br>        <span class="hljs-keyword">if</span> cur_node.right:<br>            stack.append(cur_node.rigth)<br>        <span class="hljs-keyword">if</span> cur_node.left:<br>            stack.append(cur_node.left)<br>    <span class="hljs-keyword">return</span> ret<br>    <br></code></pre></td></tr></table></figure></li><li><p>golang版本实现</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">type</span> TreeNode <span class="hljs-keyword">struct</span> &#123;<br>Val   <span class="hljs-type">int</span><br>Left  *TreeNode<br>Right *TreeNode<br>&#125;<br><br><span class="hljs-comment">// 递归版本实现</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">frontErgodic</span><span class="hljs-params">(root *TreeNode)</span></span> []<span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> []<span class="hljs-type">int</span>&#123;&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">append</span>(<span class="hljs-built_in">append</span>([]<span class="hljs-type">int</span>&#123;root.Val&#125;, frontErgodic(root.Left)...), frontErgodic(root.Right)...)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fronErgodicNoRecursive</span><span class="hljs-params">(root *TreeNode)</span></span> []<span class="hljs-type">int</span> &#123;<br>stack := []*TreeNode&#123;root&#125;<br>ret := []<span class="hljs-type">int</span>&#123;&#125;<br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(stack) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">break</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>curNode := stack[<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]<br>ret = <span class="hljs-built_in">append</span>(ret, curNode.Val)<br>stack = stack[:<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]<br><span class="hljs-keyword">if</span> curNode.Right != <span class="hljs-literal">nil</span> &#123;<br>stack = <span class="hljs-built_in">append</span>(stack, curNode.Right)<br>            &#125;<br><span class="hljs-keyword">if</span> curNode.Left != <span class="hljs-literal">nil</span> &#123;<br>stack = <span class="hljs-built_in">append</span>(stack, curNode.Left)<br>            &#125;<br>        &#125;<br>    &#125;<br><span class="hljs-keyword">return</span> ret <br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><h1 id="2-二叉树的中序遍历"><a href="#2-二叉树的中序遍历" class="headerlink" title="2 二叉树的中序遍历"></a>2 二叉树的中序遍历</h1><p><strong>中序遍历的特点，优先遍历左节点，然后遍历根节点，然后遍历右节点</strong></p><ul><li><p>python算法的实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Optional</span>, <span class="hljs-type">List</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, val: <span class="hljs-built_in">int</span></span>):<br>        self.val = val<br>        self.left: <span class="hljs-type">Optional</span>[TreeNode] = <span class="hljs-literal">None</span><br>        self.right: <span class="hljs-type">Optional</span>[TreeNode] = <span class="hljs-literal">None</span><br><br><br><span class="hljs-comment"># 递归算法的实现</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mid_bianry_search_cursive</span>(<span class="hljs-params">root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>    <span class="hljs-keyword">if</span> root <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> []<br>    <span class="hljs-keyword">return</span> mid_bianry_serach_cursive(root.left) + [root.val] + mid_bianry_search_cursive(root.right)<br><br><br><span class="hljs-comment"># 非递归算法的实现</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mid_binary_serach_no_cursive</span>(<span class="hljs-params">root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>        <span class="hljs-keyword">return</span> []<br>    ret = []<br>    stack = []<br>    <span class="hljs-keyword">if</span> root.right:<br>            stack.append(root.right)<br>    stack.append(root.val)<br>    <span class="hljs-keyword">if</span> root.left:<br>        stack.append(root.left)<br>    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> stack:<br>            <span class="hljs-keyword">break</span><br>        obj = stack.pop()<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(obj, (<span class="hljs-built_in">int</span>, )):<br>            ret.append(obj)<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">isinstance</span>(obj, (TreeNode, )):<br>            <span class="hljs-keyword">if</span> obj.right:<br>                stack.append(obj.right)<br>            stack.append(obj.val)<br>            <span class="hljs-keyword">if</span> obj.left:<br>                obj.append(obj.left)<br>    <span class="hljs-keyword">return</span> ret<br></code></pre></td></tr></table></figure></li><li><p>golang算法实现</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><span class="hljs-keyword">type</span> TreeNode <span class="hljs-keyword">struct</span> &#123;<br>val <span class="hljs-type">int</span><br>left *TreeNode<br>right *TreeNode<br>&#125;<br><br><span class="hljs-comment">// 递归算法</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">midBianrySearchCursive</span><span class="hljs-params">(root *TreeNode)</span></span> []<span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> []<span class="hljs-type">int</span>&#123;&#125;<br>    &#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">append</span>(<span class="hljs-built_in">append</span>(midBianrySearchCursive(root.left), root.val), midBianrySearchCursive(root.right)...)<br>&#125;<br><br><br><span class="hljs-comment">// 非递归算法</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">midBianrySearchNoCursive</span><span class="hljs-params">(root *TreeNode)</span></span> []<span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">var</span> retSlice []<span class="hljs-type">int</span><br><span class="hljs-keyword">var</span> stack []<span class="hljs-keyword">interface</span>&#123;&#125;<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> retSlice<br>    &#125;<br><span class="hljs-keyword">if</span> root.right != <span class="hljs-literal">nil</span> &#123;<br>stack = <span class="hljs-built_in">append</span>(stack, root.right)<br>    &#125;<br>stack = <span class="hljs-built_in">append</span>(stack, root.val)<br><span class="hljs-keyword">if</span> root.left != <span class="hljs-literal">nil</span> &#123;<br>stack = <span class="hljs-built_in">append</span>(stack, root.right)<br>    &#125;<br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(stack) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">break</span><br>        &#125;<br>obj := stack[<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]<br>stack = stack[:<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]<br><span class="hljs-keyword">if</span> node, ok := obj.(*TreeNode); ok &#123;<br><span class="hljs-keyword">if</span> node.right != <span class="hljs-literal">nil</span> &#123;<br>stack = <span class="hljs-built_in">append</span>(stack, node.right)<br>&#125;<br>stack = <span class="hljs-built_in">append</span>(stack, node.val)<br><span class="hljs-keyword">if</span> node.left != <span class="hljs-literal">nil</span> &#123;<br>stack = <span class="hljs-built_in">append</span>(stack, node.right)<br>&#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> num, ok := obj.(<span class="hljs-type">int</span>); ok &#123;<br>retSlice = <span class="hljs-built_in">append</span>(retSlice, num)<br>        &#125;<br>    &#125;<br><span class="hljs-keyword">return</span> retSlice<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="3-二叉树的后序遍历"><a href="#3-二叉树的后序遍历" class="headerlink" title="3 二叉树的后序遍历"></a>3 二叉树的后序遍历</h1><p><strong>后序遍历即根据根节点的位置，即先左节点，然后右节点，最后根节点</strong></p><ul><li><p>python代码实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span>, <span class="hljs-type">Optional</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, val: <span class="hljs-built_in">int</span></span>):<br>        self.val: <span class="hljs-built_in">int</span> = val<br>        self.left: <span class="hljs-type">Optional</span>[TreeNode] = <span class="hljs-literal">None</span><br>        self.right: <span class="hljs-type">Optional</span>[TreeNode] = <span class="hljs-literal">None</span><br><br><span class="hljs-comment"># 递归版本</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">end_binary_search_cursive</span>(<span class="hljs-params">root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>    <span class="hljs-keyword">if</span> root <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> []<br>    <span class="hljs-keyword">return</span> end_binary_search_cursive(root.left) + end_binary_search_cursive(root.right) + [root.val]<br>    <br><span class="hljs-comment"># 非递归版本</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">end_binay_search_no_cursive</span>(<span class="hljs-params">root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>    ret: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>] = []<br>    stack: <span class="hljs-type">List</span>[<span class="hljs-type">Union</span>[<span class="hljs-built_in">int</span>, TreeNode]] = []<br>    <span class="hljs-keyword">if</span> root <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        stack.append(root.val)<br>        <span class="hljs-keyword">if</span> root.right <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            stack.append(root.right)<br>        <span class="hljs-keyword">if</span> root.left <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            stack.append(root.left)<br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(stack) &gt; <span class="hljs-number">0</span>:<br>        cur_obj = stack.pop()<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(cur_obj, (<span class="hljs-built_in">int</span>, )):<br>            ret.append(cur_obj)<br>        <span class="hljs-keyword">else</span>:<br>            stack.append(cur_obj.val)<br>            <span class="hljs-keyword">if</span> cur_obj.right <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                stack.append(cur_obj.right)<br>            <span class="hljs-keyword">if</span> cur_obj.left <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                stack.append(cur_obj.left)<br>    <span class="hljs-keyword">return</span> ret<br></code></pre></td></tr></table></figure></li><li><p>golang版本实现</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><span class="hljs-keyword">type</span> TreeNode <span class="hljs-keyword">struct</span> &#123;<br>val <span class="hljs-type">int</span><br>left *TreeNode<br>right *TreeNode<br>&#125;<br><br><span class="hljs-comment">// 递归算法</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">endBinarySearchCursive</span><span class="hljs-params">(root *TreeNode)</span></span> []<span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> []<span class="hljs-type">int</span>&#123;&#125;<br>    &#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">append</span>(<span class="hljs-built_in">append</span>(endBinarySearchCursive(left), endBinarySearchCursive(root.right)...), root.val)<br>&#125;<br><br><span class="hljs-comment">// 非递归算法</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">endBinarySearchNoCursive</span><span class="hljs-params">(root *TreeNode)</span></span> []<span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">var</span> (<br>ret []<span class="hljs-type">int</span><br>stack []<span class="hljs-keyword">interface</span>&#123;&#125;<br>    )<br><span class="hljs-keyword">if</span> root != <span class="hljs-literal">nil</span> &#123;<br>stack = <span class="hljs-built_in">append</span>(stack, root.val)<br><span class="hljs-keyword">if</span> root.right != <span class="hljs-literal">nil</span> &#123;<br>stack = <span class="hljs-built_in">append</span>(stack, root.right)<br>        &#125;<br><span class="hljs-keyword">if</span> root.left != <span class="hljs-literal">nil</span> &#123;<br>stack = <span class="hljs-built_in">append</span>(stack, root.left)<br>        &#125;<br>    &#125;<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(stack) &gt; <span class="hljs-number">0</span> &#123;<br>curObj := stack[<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]<br>stack = stack[:<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]<br><span class="hljs-keyword">if</span> num, ok := curObj.(<span class="hljs-type">int</span>); ok &#123;<br>ret = <span class="hljs-built_in">append</span>(ret, num)<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> node, ok := curObj.(*TreeNode); ok &#123;<br>stack = <span class="hljs-built_in">append</span>(satck, node.val)<br><span class="hljs-keyword">if</span> node.right != <span class="hljs-literal">nil</span> &#123;<br>stack = <span class="hljs-built_in">append</span>(stack, node.right)<br>            &#125;<br><span class="hljs-keyword">if</span> node.left != <span class="hljs-literal">nil</span> &#123;<br>stack = <span class="hljs-built_in">append</span>(stack, node.left)<br>            &#125;<br>        &#125;<br>    &#125;<br><span class="hljs-keyword">return</span> ret<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>golang中的type的使用</title>
    <link href="/2023/10/16/gol%E4%B8%ADtype%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/10/16/gol%E4%B8%ADtype%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="1-type的作用"><a href="#1-type的作用" class="headerlink" title="1. type的作用"></a>1. type的作用</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-comment">// 1. 定义结构体</span><br><span class="hljs-keyword">type</span> Person <span class="hljs-keyword">struct</span> &#123;<br>Name <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-comment">// 2. 定义接口</span><br><span class="hljs-keyword">type</span> drink <span class="hljs-keyword">interface</span> &#123;<br>water()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(person Person)</span></span> water() &#123;<br>fmt.Println(<span class="hljs-string">&quot;I&#x27;m drinking water&quot;</span>)<br>&#125;<br><br><span class="hljs-comment">// 3. 定义函数</span><br><span class="hljs-keyword">type</span> helloFunc <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(isOk <span class="hljs-type">bool</span>, name <span class="hljs-type">string</span>)</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> per drink = &amp;Person&#123;<br>Name: <span class="hljs-string">&quot;张三&quot;</span>,<br>    &#125;<br>per.water()<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql常用的函数</title>
    <link href="/2023/07/13/sql%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    <url>/2023/07/13/sql%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="一、字符串的常用的函数"><a href="#一、字符串的常用的函数" class="headerlink" title="一、字符串的常用的函数"></a>一、字符串的常用的函数</h2><h3 id="1-计算字符串的长度的函数-LENGTH和CHAR-LENGTH"><a href="#1-计算字符串的长度的函数-LENGTH和CHAR-LENGTH" class="headerlink" title="1. 计算字符串的长度的函数, LENGTH和CHAR_LENGTH"></a>1. 计算字符串的长度的函数, LENGTH和CHAR_LENGTH</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">char_length</span>, # 计算字符串的长度，有点类似python的len<br>length # 计算字符串的字节长度，如&quot;你好&quot;是<span class="hljs-number">6</span>个长度, 有点类似golang的len计算字符串字节的长度<br></code></pre></td></tr></table></figure><h3 id="2-CONCAT，-合并字符的函数"><a href="#2-CONCAT，-合并字符的函数" class="headerlink" title="2. CONCAT， 合并字符的函数"></a>2. CONCAT， 合并字符的函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> CONCAT(&quot;hello&quot;, &quot; world&quot;, &quot; 你好&quot;, &quot; 世界&quot;)<br># hello world 你好 世界<br></code></pre></td></tr></table></figure><h3 id="3-LOWER和UPPER"><a href="#3-LOWER和UPPER" class="headerlink" title="3. LOWER和UPPER"></a>3. LOWER和UPPER</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">LOWER</span>(&quot;HELLO&quot;) <span class="hljs-keyword">as</span> lower_res, <span class="hljs-built_in">UPPER</span>(&quot;world&quot;) <span class="hljs-keyword">as</span> upper_result;<br># hello, WORLD<br></code></pre></td></tr></table></figure><h3 id="4-SUBSTRING-str-from-position-substring-length-获取对应的子串-注意字符串下标是从1开始的"><a href="#4-SUBSTRING-str-from-position-substring-length-获取对应的子串-注意字符串下标是从1开始的" class="headerlink" title="4. SUBSTRING(str, from_position, substring_length), 获取对应的子串, 注意字符串下标是从1开始的"></a>4. SUBSTRING(str, from_position, substring_length), 获取对应的子串, 注意字符串下标是从1开始的</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">substring</span>(&quot;hello world&quot;, <span class="hljs-number">1</span>)  # hello world<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">substring</span>(&quot;abcdefg&quot;, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>) # bc<br><br></code></pre></td></tr></table></figure><h3 id="5-TRIM-remstr-FROM-str-类似于python的strip函数，-去除字符串两侧的指定字符，如果不填写的话默认是空格"><a href="#5-TRIM-remstr-FROM-str-类似于python的strip函数，-去除字符串两侧的指定字符，如果不填写的话默认是空格" class="headerlink" title="5. TRIM([remstr FROM]  str), 类似于python的strip函数， 去除字符串两侧的指定字符，如果不填写的话默认是空格"></a>5. TRIM([remstr FROM]  str), 类似于python的strip函数， 去除字符串两侧的指定字符，如果不填写的话默认是空格</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">trim</span>(&quot; abc  &quot;);  # &quot;abc&quot;<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">trim</span>(&quot;a&quot; <span class="hljs-keyword">from</span> &quot;abca&quot;) # &quot;bc&quot;<br></code></pre></td></tr></table></figure><h3 id="6-INSTR-str-substr-函数用于返回子串substr在字符串str中的第一次出现的索引的位置，没有找到子串时返回0"><a href="#6-INSTR-str-substr-函数用于返回子串substr在字符串str中的第一次出现的索引的位置，没有找到子串时返回0" class="headerlink" title="6. INSTR(str, substr)函数用于返回子串substr在字符串str中的第一次出现的索引的位置，没有找到子串时返回0"></a>6. INSTR(str, substr)函数用于返回子串substr在字符串str中的第一次出现的索引的位置，没有找到子串时返回0</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> INSTR(&quot;abc&quot;, &quot;a&quot;); # <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>sql</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python单元测试</title>
    <link href="/2023/07/07/python%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <url>/2023/07/07/python%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="一、unittest是python的自带的单元测试，它支持测试自动化，多个测试用例共享前置和清理代码"><a href="#一、unittest是python的自带的单元测试，它支持测试自动化，多个测试用例共享前置和清理代码" class="headerlink" title="一、unittest是python的自带的单元测试，它支持测试自动化，多个测试用例共享前置和清理代码"></a>一、unittest是python的自带的单元测试，它支持测试自动化，多个测试用例共享前置和清理代码</h1><h1 id="二、简单的用例编写"><a href="#二、简单的用例编写" class="headerlink" title="二、简单的用例编写"></a>二、简单的用例编写</h1><h2 id="1-代码示例"><a href="#1-代码示例" class="headerlink" title="1. 代码示例"></a>1. 代码示例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># TestSample.py</span><br><span class="hljs-keyword">import</span> unittest<br><span class="hljs-keyword">import</span> functools<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_func</span>(<span class="hljs-params">a: <span class="hljs-built_in">int</span>, b: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-keyword">return</span> a + b<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestSample</span>(unittest.TestCase):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setUp</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 测试前置处理, 在每一个测试函数运行之前都会运行</span><br>        <span class="hljs-keyword">pass</span><br>    <br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setUpClass</span>(<span class="hljs-params">cls</span>):<br>        <span class="hljs-comment"># 整个类运行之前只会运行一次</span><br>        <span class="hljs-keyword">pass</span><br>    <br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">tearDownClass</span>(<span class="hljs-params">cls</span>):<br>        <span class="hljs-comment"># 整个类运行完成之后只会运行一次</span><br>        <span class="hljs-keyword">pass</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">tearDown</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 测试后置处理, 在每一个测试函数运行之后都会运行</span><br>        <span class="hljs-keyword">pass</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_my_func</span>(<span class="hljs-params">self</span>):<br>        a, b = <span class="hljs-number">0</span>, <span class="hljs-number">3</span><br>        self.assertEqual(my_func(a, b), <span class="hljs-number">3</span>)<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_decorate</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 用来测试使用functools.wraps来恢复原函数的func.__doc__ func.__name__</span><br>        self.assertEqual(fun.__doc__, <span class="hljs-string">&quot;hello world&quot;</span>)<br>        self.assertEqual(fun.__name__, <span class="hljs-string">&quot;fun&quot;</span>)<br>        <br>        <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_decorate</span>(<span class="hljs-params">fn</span>):<br><span class="hljs-meta">    @functools.wraps(<span class="hljs-params">fn</span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args, **kwargs</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;start&quot;</span>)<br>        res = fn(*args, **kwargs)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;end&quot;</span>)<br>        <span class="hljs-keyword">return</span> res<br>    <span class="hljs-keyword">return</span> wrapper<br><br><br><span class="hljs-meta">@my_decorate</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;hello world&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">pass</span><br><br>        <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    unittest.main()<br><span class="hljs-comment"># 运行的方法 python -m unittest</span><br><span class="hljs-comment"># 指定文件运行 python -m unittest TestModule</span><br><span class="hljs-comment"># 指定类运行 python -m unittest TestModule.TestClass</span><br><span class="hljs-comment"># 指定方法运行 python -m unittest TestModule.TestClass.TestMethod</span><br></code></pre></td></tr></table></figure><h2 id="2-除了self-assertEqual方法之外还有"><a href="#2-除了self-assertEqual方法之外还有" class="headerlink" title="2. 除了self.assertEqual方法之外还有"></a>2. 除了self.assertEqual方法之外还有</h2><ul><li>self.assertTrue(a): 判断返回值是否是True, 只要不是空类型的返回值都算是True，如”hello”, 1, 但是 0 不是， 空列表也不是</li><li>self.assertFalse(a): 判断返回时是否是False</li><li>self.assertNotEqual(a, b):</li><li>self.assertIs(a, b): 类似于python的is判断地址是否相等</li><li>self.assertIn(a, b): 类似于python的in</li><li>self.assertIsInstance(a, b): 可以等价于 self.assertTrue(isinstance(obj, (dict, int, str)))</li><li>self.assertGreater(a, b): 判断a是否大于b, a &gt; b</li><li>self.assertGreaterEqual(a, b): a &gt;&#x3D; b</li><li>self.assertLess(a, b): a &lt; b</li><li>self.assertLessEqual(a, b): a &lt;&#x3D; b</li></ul><h2 id="3-还可以使用-unittest-skip来跳过某些测试用例，或者只跳过符合某些条件的情况，skip的话就是里边的函数不会执行了"><a href="#3-还可以使用-unittest-skip来跳过某些测试用例，或者只跳过符合某些条件的情况，skip的话就是里边的函数不会执行了" class="headerlink" title="3. 还可以使用@unittest.skip来跳过某些测试用例，或者只跳过符合某些条件的情况，skip的话就是里边的函数不会执行了"></a>3. 还可以使用@unittest.skip来跳过某些测试用例，或者只跳过符合某些条件的情况，skip的话就是里边的函数不会执行了</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> unittest<br>name = <span class="hljs-string">&quot;Jack&quot;</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sample</span>(unittest.TestCase):<br><span class="hljs-meta">    @unittest.skipIf(<span class="hljs-params">name==<span class="hljs-string">&quot;Jack&quot;</span>, reason=<span class="hljs-string">&quot;skip the case which name is Jack&quot;</span></span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_func</span>(<span class="hljs-params">self</span>):<br>        self.assertEqual(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, msg=<span class="hljs-string">&quot;测试&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="4-可以使用子测试来测试批量的数据"><a href="#4-可以使用子测试来测试批量的数据" class="headerlink" title="4. 可以使用子测试来测试批量的数据"></a>4. 可以使用子测试来测试批量的数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> unittest<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sample</span>(unittest.TestCase):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_func</span>(<span class="hljs-params">self</span>):<br>        names = [<span class="hljs-string">&quot;Jack&quot;</span>, <span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-string">&quot;Micheal&quot;</span>, <span class="hljs-string">&quot;Rose&quot;</span>]<br>        <span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> names:<br>            <span class="hljs-keyword">with</span> self.subTest():<br>                self.assertEqual(name, <span class="hljs-string">&quot;Jack&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    unittest.main()<br></code></pre></td></tr></table></figure><h2 id="5-命令运行当中可以增加-v参数来查看详细的执行例子-python-m-unittest-v-xxx-module"><a href="#5-命令运行当中可以增加-v参数来查看详细的执行例子-python-m-unittest-v-xxx-module" class="headerlink" title="5. 命令运行当中可以增加-v参数来查看详细的执行例子 python -m unittest -v xxx_module"></a>5. 命令运行当中可以增加-v参数来查看详细的执行例子 python -m unittest -v xxx_module</h2>]]></content>
    
    
    
    <tags>
      
      <tag>python测试</tag>
      
      <tag>unittest</tag>
      
      <tag>单元测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《测试工程师全栈技术进阶与实践》</title>
    <link href="/2023/07/06/%E4%B9%A6%E7%B1%8D%E3%80%8A%E6%B5%8B%E8%AF%95%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%85%A8%E6%A0%88%E6%8A%80%E6%9C%AF%E8%BF%9B%E9%98%B6%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8B%E9%98%85%E8%AF%BB/"/>
    <url>/2023/07/06/%E4%B9%A6%E7%B1%8D%E3%80%8A%E6%B5%8B%E8%AF%95%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%85%A8%E6%A0%88%E6%8A%80%E6%9C%AF%E8%BF%9B%E9%98%B6%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8B%E9%98%85%E8%AF%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="一、常用的测试用例的设计方法"><a href="#一、常用的测试用例的设计方法" class="headerlink" title="一、常用的测试用例的设计方法"></a>一、常用的测试用例的设计方法</h1><h2 id="1-等价类划分法"><a href="#1-等价类划分法" class="headerlink" title="1. 等价类划分法"></a>1. 等价类划分法</h2><blockquote><p>如一个测试学生成绩的测试系统，输入考生成绩0~100的成绩，59是及格，则可以划分成一下的几个类别</p></blockquote><ul><li>0~59的整数</li><li>59~100的整数</li><li>小于0的数</li><li>大于0的数</li><li>0~100的任意的浮点数</li><li>其它任意非数字字符</li></ul><h2 id="2-边界值分析法"><a href="#2-边界值分析法" class="headerlink" title="2. 边界值分析法"></a>2. 边界值分析法</h2><blockquote><p>边界值的方法通常是对等价类划分法的补充，所选取的值可以是以下的值</p></blockquote><ul><li>-1</li><li>0</li><li>1</li><li>59</li><li>60</li><li>61</li><li>99</li><li>100</li><li>101</li></ul><h2 id="3-错误类推方法"><a href="#3-错误类推方法" class="headerlink" title="3. 错误类推方法"></a>3. 错误类推方法</h2><blockquote><p>基于个人的经验对于可能存在的错误设计对应的测试用例</p></blockquote><h1 id="二、ToDo"><a href="#二、ToDo" class="headerlink" title="二、ToDo"></a>二、ToDo</h1><ul><li><input checked="" disabled="" type="checkbox"> python单元测试</li><li><input disabled="" type="checkbox"> appium的熟悉和使用</li><li><input disabled="" type="checkbox"> android性能监控工具Emmagee的熟悉和使用</li><li><input disabled="" type="checkbox"> Wireshark和Fiddler网络工具的熟悉和使用</li><li><input disabled="" type="checkbox"> 移动网络测试工具Augmented Traffic Control</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>测试工程师全栈技术进阶与实践</tag>
      
      <tag>书籍阅读</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lru算法的实现</title>
    <link href="/2023/07/01/lru%E7%AE%97%E6%B3%95/"/>
    <url>/2023/07/01/lru%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="lru-Least-Recently-Used-最近最少使用算法-即每次使用新的key或者使用老的key进行查询的时候都会把这个key移动到链表的左边，如果空间不够了的话就会删除右边的元素"><a href="#lru-Least-Recently-Used-最近最少使用算法-即每次使用新的key或者使用老的key进行查询的时候都会把这个key移动到链表的左边，如果空间不够了的话就会删除右边的元素" class="headerlink" title="lru(Least Recently Used)最近最少使用算法,即每次使用新的key或者使用老的key进行查询的时候都会把这个key移动到链表的左边，如果空间不够了的话就会删除右边的元素"></a>lru(Least Recently Used)最近最少使用算法,即每次使用新的key或者使用老的key进行查询的时候都会把这个key移动到链表的左边，如果空间不够了的话就会删除右边的元素</h2><h2 id="大概的原理图如下"><a href="#大概的原理图如下" class="headerlink" title="大概的原理图如下"></a>大概的原理图如下</h2><p><img src="/img/lru.jpg" alt="原理"></p><h3 id="python算法的实现"><a href="#python算法的实现" class="headerlink" title="python算法的实现"></a>python算法的实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> deque<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Optional</span>, <span class="hljs-type">Any</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Event</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">do_action</span>(<span class="hljs-params">self, key: <span class="hljs-built_in">str</span></span>):<br>        <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cache</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    规定如果数据被使用(查询,增加)则会把数据移动到左边,如果容量不够了的话会优先删除右边的数据</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, max_bytes: <span class="hljs-built_in">int</span></span>):<br>        self.max_bytes = max_bytes<br>        self.cur_bytes: <span class="hljs-built_in">int</span> = <span class="hljs-number">0</span><br>        self.lst: deque = deque([])<br>        self.cache = <span class="hljs-built_in">dict</span>()     <span class="hljs-comment"># key, value</span><br>        self.OnEvent: <span class="hljs-type">Optional</span>[Event] = <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, key: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-type">Any</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        返回对应key的值，并且把key移动到队尾</span><br><span class="hljs-string">        :param key:</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        value = <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">if</span> key <span class="hljs-keyword">in</span> self.cache:<br>            value = self.cache.get(key)<br>            <span class="hljs-comment"># 移动到队尾</span><br>            self.lst.remove(key)<br>            self.lst.appendleft(key)<br>        <span class="hljs-keyword">return</span> value<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">remove_oldest</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 删除队首的数据</span><br>        <span class="hljs-keyword">if</span> self.lst:<br>            key = self.lst.pop()<br>            value = self.cache[key]<br>            <span class="hljs-keyword">del</span> self.cache[key]<br><br>            <span class="hljs-comment"># 重新计算剩下的数据大小</span><br>            self.cur_bytes -= sys.getsizeof(key) + sys.getsizeof(value)<br><br>            <span class="hljs-comment"># 调用回调函数</span><br>            self.OnEvent.do_action(key)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">self, key, value</span>):<br>        <span class="hljs-keyword">if</span> key <span class="hljs-keyword">in</span> self.cache:<br>            old_value = self.cache[key]<br>            extra_size = -sys.getsizeof(old_value) + sys.getsizeof(value)<br>            self.cache[key] = value<br><br>            <span class="hljs-comment"># 删除key</span><br>            self.lst.remove(key)<br>        <span class="hljs-keyword">else</span>:<br>            self.cache[key] = value<br>            extra_size = sys.getsizeof(key) + sys.getsizeof(value)<br><br>        <span class="hljs-comment"># 把key移动到左边</span><br>        self.lst.appendleft(key)<br><br>        <span class="hljs-comment"># 重新计算缓存的大小</span><br>        self.cur_bytes += extra_size<br><br>        <span class="hljs-comment"># 判断是否超容</span><br>        <span class="hljs-keyword">while</span> self.cur_bytes &gt; self.max_bytes:<br>            self.remove_oldest()<br><br></code></pre></td></tr></table></figure><h3 id="golang算法的实现"><a href="#golang算法的实现" class="headerlink" title="golang算法的实现"></a>golang算法的实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;container/list&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-comment">// lru算法的实现，lru(Least Recently Used), 最近最少使用，即当内存不够的时候就淘汰最近最少使用的数据</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">缓存结构体</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">type</span> Cache <span class="hljs-keyword">struct</span> &#123;<br>maxBytes  <span class="hljs-type">int64</span><br>nBytes    <span class="hljs-type">int64</span><br>ll        *list.List<br>cache     <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]*list.Element<br>OnEvicted <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(key <span class="hljs-type">string</span>, value Value)</span></span><br>&#125;<br><br><span class="hljs-comment">// NewCache 创建新的cache</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewCache</span><span class="hljs-params">(maxBytes <span class="hljs-type">int64</span>, onEvicted <span class="hljs-keyword">func</span>(<span class="hljs-type">string</span>, Value)</span></span>) *Cache &#123;<br>r := <span class="hljs-built_in">new</span>(Cache)<br>r.maxBytes = maxBytes<br>r.ll = list.New()<br>r.cache = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]*list.Element)<br>r.OnEvicted = onEvicted<br><span class="hljs-keyword">return</span> r<br>&#125;<br><br><span class="hljs-comment">// Get 获取对应的值, 如果存在则返回对应的值， 并且把元素移动到队首</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Cache)</span></span> Get(key <span class="hljs-type">string</span>) (value Value, ok <span class="hljs-type">bool</span>) &#123;<br><span class="hljs-keyword">if</span> ele, ok := c.cache[key]; ok &#123;<br>c.ll.MoveToFront(ele)<br>kv := ele.Value.(*entry)<br><span class="hljs-keyword">return</span> kv.value, <span class="hljs-literal">true</span><br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">// RemoveOldest 移除最近很少访问的节点，删除队尾的数据，而且如果有回调函数还会回调函数</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Cache)</span></span> RemoveOldest() &#123;<br>ele := c.ll.Back()<br><span class="hljs-keyword">if</span> ele != <span class="hljs-literal">nil</span> &#123;<br>c.ll.Remove(ele)<br>kv := ele.Value.(*entry)<br><span class="hljs-built_in">delete</span>(c.cache, kv.key)<br>c.nBytes -= <span class="hljs-type">int64</span>(<span class="hljs-built_in">len</span>(kv.key)) + <span class="hljs-type">int64</span>(kv.value.Len())<br><span class="hljs-keyword">if</span> c.OnEvicted != <span class="hljs-literal">nil</span> &#123;<br>c.OnEvicted(kv.key, kv.value)<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Add 新增数据</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Cache)</span></span> Add(key <span class="hljs-type">string</span>, value Value) &#123;<br><span class="hljs-keyword">if</span> ele, ok := c.cache[key]; ok &#123;<br>c.ll.MoveToFront(ele)<br>kv := ele.Value.(*entry)<br>c.nBytes += <span class="hljs-type">int64</span>(value.Len()) - <span class="hljs-type">int64</span>(kv.value.Len())<br>kv.value = value<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>ele := c.ll.PushFront(&amp;entry&#123;key, value&#125;)<br>c.cache[key] = ele<br>c.nBytes += <span class="hljs-type">int64</span>(<span class="hljs-built_in">len</span>(key)) + <span class="hljs-type">int64</span>(value.Len())<br>&#125;<br><br><span class="hljs-keyword">for</span> c.maxBytes &lt; c.nBytes &#123;<br>c.RemoveOldest()<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">type</span> entry <span class="hljs-keyword">struct</span> &#123;<br>key   <span class="hljs-type">string</span><br>value Value<br>&#125;<br><br><span class="hljs-keyword">type</span> Value <span class="hljs-keyword">interface</span> &#123;<br>Len() <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-keyword">type</span> String <span class="hljs-type">string</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d String)</span></span> Len() <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(d)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>lru</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>trie树的实现</title>
    <link href="/2023/06/20/trie%E6%A0%91%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <url>/2023/06/20/trie%E6%A0%91%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="一-trie树叫做前缀树-目录结构如下图所示-主要是用于路由匹配"><a href="#一-trie树叫做前缀树-目录结构如下图所示-主要是用于路由匹配" class="headerlink" title="一. trie树叫做前缀树,目录结构如下图所示,主要是用于路由匹配"></a>一. trie树叫做前缀树,目录结构如下图所示,主要是用于路由匹配</h2><p><img src="/img/trie.jpg" alt="trie树"><br>图中的数据节点有 t-to, t-te-tea, t-te-ted, t-te-ten, A, i-in-inn 这样的顺序链</p><h2 id="二-算法的实现"><a href="#二-算法的实现" class="headerlink" title="二. 算法的实现"></a>二. 算法的实现</h2><h3 id="1-python实现"><a href="#1-python实现" class="headerlink" title="1. python实现"></a>1. python实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> annotations<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Optional</span>, <span class="hljs-type">List</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.part: <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;&quot;</span><br>        self.url: <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;&quot;</span>  <span class="hljs-comment"># 叶子节点才需要记录一下完整的url</span><br>        self.children: <span class="hljs-type">List</span>[<span class="hljs-type">Optional</span>[Node]] = []<br>        self.is_wild: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">False</span>  <span class="hljs-comment"># 是否是精确匹配</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">match_child</span>(<span class="hljs-params">self, part</span>) -&gt; <span class="hljs-type">Optional</span>[Node]:<br>        <span class="hljs-comment"># 返回匹配的子节点</span><br>        <span class="hljs-keyword">for</span> child <span class="hljs-keyword">in</span> self.children:<br>            <span class="hljs-keyword">if</span> child.part == part <span class="hljs-keyword">or</span> child.is_wild:<br>                <span class="hljs-keyword">return</span> child<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">match_children</span>(<span class="hljs-params">self, part</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">Optional</span>[Node]]:<br>        nodes: <span class="hljs-type">List</span>[<span class="hljs-type">Optional</span>[Node]] = []<br>        <span class="hljs-keyword">for</span> child <span class="hljs-keyword">in</span> self.children:<br>            <span class="hljs-keyword">if</span> child.part == part <span class="hljs-keyword">or</span> child.is_wild:<br>                nodes.append(child)<br>        <span class="hljs-keyword">return</span> nodes<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">insert</span>(<span class="hljs-params">self, part_lst: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>], height: <span class="hljs-built_in">int</span>, url: <span class="hljs-built_in">str</span></span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(part_lst) == height:<br>            self.url = url<br>            <span class="hljs-keyword">return</span><br>        part = part_lst[height]<br>        child = self.match_child(part)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> child:<br>            <span class="hljs-comment"># 需要新建立一个child</span><br>            child = Node()<br>            self.children.append(child)<br>            child.part = part<br>            child.is_wild = part[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;*&quot;</span> <span class="hljs-keyword">or</span> part[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;:&quot;</span><br>        child.insert(part_lst, height+<span class="hljs-number">1</span>, url)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">search</span>(<span class="hljs-params">self, part_lst: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>], height: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">Optional</span>[Node]:<br>        <span class="hljs-comment"># 当搜索的高度等于part_lst的高度的时候并且url不是空的时候返回对应的节点,该节点包含了整个url的信息</span><br>        <span class="hljs-comment"># 或者当遇到*匹配的时候 如 /hello/* 可以匹配 /hello/world/a、/hello/caa、/hello也算该url</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(part_lst) == height <span class="hljs-keyword">or</span> self.part.startswith(<span class="hljs-string">&quot;*&quot;</span>):<br>            <span class="hljs-keyword">if</span> self.url == <span class="hljs-string">&quot;&quot;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>            <span class="hljs-keyword">return</span> self<br><br>        part = part_lst[height]<br>        children = self.match_children(part)<br><br>        <span class="hljs-keyword">for</span> child <span class="hljs-keyword">in</span> children:<br>            r = child.search(part_lst, height+<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> r:<br>                <span class="hljs-keyword">return</span> r<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br></code></pre></td></tr></table></figure><h3 id="2-golang实现"><a href="#2-golang实现" class="headerlink" title="2. golang实现"></a>2. golang实现</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> gee<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;strings&quot;</span><br><br><span class="hljs-keyword">type</span> node <span class="hljs-keyword">struct</span> &#123;<br>part   <span class="hljs-type">string</span><br>url  <span class="hljs-type">string</span><br>children []*node<br>isWild <span class="hljs-type">bool</span> <br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(n *node)</span></span> matchChild (part <span class="hljs-type">string</span>) *node &#123;<br><span class="hljs-keyword">for</span> _, child := <span class="hljs-keyword">range</span> n.children &#123;<br><span class="hljs-keyword">if</span> child.part == part || child.isWild &#123;<br><span class="hljs-keyword">return</span> child<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(n *node)</span></span> matchChildren (part <span class="hljs-type">string</span>) []*node &#123;<br>nodes := <span class="hljs-built_in">make</span>([]*node, <span class="hljs-number">0</span>)<br><span class="hljs-keyword">for</span> _, child := <span class="hljs-keyword">range</span> n.children &#123;<br><span class="hljs-keyword">if</span> child.part == part || child.isWild &#123;<br>nodes = <span class="hljs-built_in">append</span>(nodes, child)<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> nodes<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(n *node)</span></span> insert (partList []<span class="hljs-type">string</span>, url <span class="hljs-type">string</span>, height <span class="hljs-type">int</span>) &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(partList) == height &#123;<br>n.url = url<br><span class="hljs-keyword">return</span><br>&#125;<br>part := partList[height]<br>child := n.matchChild(part)<br><span class="hljs-keyword">if</span> child == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-comment">// 新建node</span><br>child = &amp;node&#123;part: part, isWild: part[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;*&#x27;</span> || part[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;:&#x27;</span>&#125;<br>n.children = <span class="hljs-built_in">append</span>(n.children, child)<br>&#125;<br>child.insert(partList, url, height+<span class="hljs-number">1</span>)<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(n *node)</span></span> search (partList []<span class="hljs-type">string</span>, height <span class="hljs-type">int</span>) *node &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(partList) == height || strings.HasPrefix(n.part, <span class="hljs-string">&quot;*&quot;</span>) &#123;<br><span class="hljs-keyword">if</span> n.part != <span class="hljs-string">&quot;&quot;</span> &#123;<br><span class="hljs-keyword">return</span> n<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br>part := partList[height]<br>children := n.matchChildren(part)<br><span class="hljs-keyword">for</span> _, child := <span class="hljs-keyword">range</span> children &#123;<br>r := child.search(partList, height+<span class="hljs-number">1</span>)<br><span class="hljs-keyword">if</span> r != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> r<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>golang基础语法</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>golang的基础学习</title>
    <link href="/2023/06/18/go%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/06/18/go%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="1-变量的定义"><a href="#1-变量的定义" class="headerlink" title="1. 变量的定义"></a>1. 变量的定义</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> name <span class="hljs-type">string</span><br>name = <span class="hljs-string">&quot;hello world&quot;</span><br><br><span class="hljs-keyword">var</span> name <span class="hljs-type">string</span> = <span class="hljs-string">&quot;hello world&quot;</span><br><br>name := <span class="hljs-string">&quot;hello world&quot;</span><br></code></pre></td></tr></table></figure><h1 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2. 数据类型"></a>2. 数据类型</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 数字类型</span><br><span class="hljs-comment">// int8, int16, int32, int64, int -&gt; 主要是看操作系统, 如果是32位的话则是int32, 否则的话则是int64</span><br><span class="hljs-comment">// uint8, uint16, uint32, uint64, 无符号类型</span><br><span class="hljs-comment">// float32, float64</span><br><br><span class="hljs-comment">// 数组类型</span><br><span class="hljs-comment">// var arr [3]int</span><br><span class="hljs-comment">// arr = [3]int&#123;1, 2, 3&#125;</span><br><span class="hljs-comment">// arr := [...]int&#123;1, 2, 3&#125;</span><br><br><span class="hljs-comment">// 切片类型</span><br><span class="hljs-comment">// slice := arr[:3]</span><br><span class="hljs-comment">// var slice []int</span><br><span class="hljs-comment">// slice = []int&#123;4, 5, 6&#125;</span><br><span class="hljs-comment">// slice := []int&#123;7, 8, 9&#125;</span><br><span class="hljs-comment">// slice := make([]int, 0, 0)</span><br><br><span class="hljs-comment">// 字符和字符串类型</span><br><span class="hljs-comment">// 字符串需要使用 &quot;&quot; 双引号包裹，字符只需要使用 &#x27;&#x27; 单引号包裹,</span><br><span class="hljs-comment">// var s string</span><br><span class="hljs-comment">// var c rune</span><br><span class="hljs-comment">// var a byte</span><br><span class="hljs-comment">// rune和byte都是字符， 但是rune占3位，byte相当于uint8 类型</span><br><br><span class="hljs-comment">// 结构体</span><br><span class="hljs-keyword">type</span> Person <span class="hljs-keyword">struct</span> &#123;<br>    Name    <span class="hljs-type">string</span><br>    Age     <span class="hljs-type">int</span><br>&#125;<br><span class="hljs-comment">// 结构体的方法</span><br><span class="hljs-keyword">type</span> (person *Person)run() &#123;<br>    fmt.Printf(<span class="hljs-string">&quot;%s正在奔跑\n&quot;</span>, person.Name)<br>&#125;<br><br><span class="hljs-comment">// 接口, 就是实现了方法的集和, 可以使用interface&#123;&#125;来表示函数传参的时候不定类型</span><br><span class="hljs-keyword">type</span> Hello <span class="hljs-keyword">interface</span> &#123;<br>    haha()<br>    hehe()<br>&#125;<br><br><span class="hljs-comment">// 信道,chan, 主要是goroutine使用</span><br>c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>) <span class="hljs-comment">// 无缓存信道, 需要优先监听信道</span><br>c2 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span> <span class="hljs-number">3</span>) <span class="hljs-comment">// 可以缓存长度是3的信道</span><br>msg := &lt;- c <span class="hljs-comment">// 从信道拿消息</span><br>c &lt;- <span class="hljs-string">&quot;hello world&quot;</span> <span class="hljs-comment">// 发送消息到信道里边</span><br><br><br></code></pre></td></tr></table></figure><h1 id="3-常用的标准库"><a href="#3-常用的标准库" class="headerlink" title="3. 常用的标准库"></a>3. 常用的标准库</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// strings的方法</span><br><span class="hljs-comment">// strings.Repeat(&quot;hello&quot;, 3) =&gt; &quot;hellohellohello&quot; 类似于python的 &quot;hello&quot; * 3</span><br><span class="hljs-comment">// strings.Count(&quot;hello&quot;, &quot;l&quot;)</span><br><span class="hljs-comment">// strings.Replace(&quot;hello&quot;, &quot;ll&quot;, &quot;aab&quot;, 1)</span><br><span class="hljs-comment">// strings.Fields(&quot; hell\nha   hehe&quot;) =&gt; [&quot;hell&quot; &quot;ha&quot; &quot;hehe&quot;]类似于python的str.split()</span><br><span class="hljs-comment">// strings.Split(&quot;hello&quot;, &quot;he&quot;)</span><br><span class="hljs-comment">// strings.Trim(&quot;hello&quot;, &quot;h&quot;) 去掉左右两边的h</span><br><span class="hljs-comment">// strings.TrimSpace(&quot; he&quot;) 去掉左右两边的空行</span><br><span class="hljs-comment">// strings.TrimLeft(&quot;hello&quot;, &quot;h&quot;)</span><br><span class="hljs-comment">// strings.ToLower(&quot;string&quot;)</span><br><span class="hljs-comment">// strings.ToUpper(&quot;hello&quot;)</span><br><span class="hljs-comment">// stirngs.Join([&quot;hello&quot; &quot;haha&quot;], &quot;abc&quot;)</span><br><br><span class="hljs-comment">// strconv的常用方法</span><br><span class="hljs-comment">// strconv.Itoa(33)</span><br><span class="hljs-comment">// strconv.Atoi(&quot;33&quot;)</span><br><br><span class="hljs-comment">// strconv.ParseInt(&quot;33&quot;, 10, 64)</span><br><span class="hljs-comment">// strconv.FormatInt(123, 10)</span><br><br><span class="hljs-comment">// strconv.FormatFloat(float64(33.33), &#x27;f&#x27;, 10, 64)</span><br><span class="hljs-comment">// strconv.ParseFloat(&#x27;33&#x27;, 64)</span><br><br><span class="hljs-comment">// strconv.FormatBool(true)</span><br><span class="hljs-comment">// strconv.ParseBool(&quot;true&quot;)</span><br><br><br><span class="hljs-comment">// time库的使用</span><br><span class="hljs-comment">// 当前时间戳</span><br><span class="hljs-comment">// time.Now().Unix()</span><br><br><span class="hljs-comment">// 当前时间字符串</span><br><span class="hljs-comment">// time.Now().Format(&quot;2006-01-02 15:04:05&quot;)</span><br><br><span class="hljs-comment">// 时间字符串 =&gt; 时间戳</span><br>obj, err := time.ParseInLocation(<span class="hljs-string">&quot;2006-01-02 15:04:05&quot;</span>, <span class="hljs-string">&quot;2000-01-01 00:00:00&quot;</span>, time.FixedZone(<span class="hljs-string">&quot;CST&quot;</span>, <span class="hljs-number">8</span>*<span class="hljs-number">3600</span>))<br>obj.Unix()<br><br><span class="hljs-comment">// 时间戳 =&gt; 时间字符串</span><br>time.Unix(timeStamp, <span class="hljs-number">0</span>).Format(<span class="hljs-string">&quot;2006-01-02 15:04:05&quot;</span>)<br><br><span class="hljs-comment">// 暂停</span><br>time.Sleep(<span class="hljs-number">3</span> * time.Second)<br><br><span class="hljs-comment">// After, 有些类似于定时器, 一般配合select 和 chan使用, 不会阻碍的定时</span><br>c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span>)<br><span class="hljs-keyword">for</span> &#123;<br>    <span class="hljs-keyword">select</span> &#123;<br>        <span class="hljs-keyword">case</span> &lt;- c:<br>            <span class="hljs-comment">// 可以刷新定时器</span><br>        <span class="hljs-keyword">case</span> &lt;- time.After(<span class="hljs-number">3</span> * time.Second):<br>            <span class="hljs-comment">// 定时器超过3秒钟</span><br>            fmt.Println(<span class="hljs-string">&quot;return&quot;</span>)<br>            <span class="hljs-keyword">return</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 正则regexp的使用</span><br>pattern := regexp.MustComiple(<span class="hljs-string">&quot;(\\d+)&quot;</span>)<br>pattern.FindStringSubmatch(<span class="hljs-string">&quot;134jak14&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>golang</tag>
      
      <tag>golang基础语法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo和fluid的使用</title>
    <link href="/2023/06/17/hexo%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/06/17/hexo%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="1-首先安装node和npm-下载地址"><a href="#1-首先安装node和npm-下载地址" class="headerlink" title="1. 首先安装node和npm, 下载地址"></a>1. 首先安装node和npm, <a href="https://nodejs.org/zh-cn/download">下载地址</a></h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">node -v # 有输出代表安装成功<br>npm -v<br>npm config set registry http://registry.npm.taobao.org  # npm 指向国内的源<br></code></pre></td></tr></table></figure><h1 id="2-安装git-下载并且安装"><a href="#2-安装git-下载并且安装" class="headerlink" title="2. 安装git, 下载并且安装"></a>2. 安装git, <a href="https://git-scm.com/download/win">下载</a>并且安装</h1><h1 id="3-安装hexo和fluid"><a href="#3-安装hexo和fluid" class="headerlink" title="3. 安装hexo和fluid"></a>3. 安装hexo和fluid</h1><ul><li>下载安装hexo<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g hexo-cli<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建新的项目</span><br>hexo init new_proj<br>cd new_proj<br>npm install<br>npm install css --save  # 修复ERROR Script load failed: themes\fluid\scripts\events\lib\highlight.js 有可能出现该失败的问题<br></code></pre></td></tr></table></figure></li><li>下载fluid<br> <a href="https://github.com/fluid-dev/hexo-theme-fluid/releases">下载地址</a>, 下载完成解压到站点目录的themes下, 并且重命名为fluid</li></ul><h1 id="4-配置站点目录下的-config-yml对应配置"><a href="#4-配置站点目录下的-config-yml对应配置" class="headerlink" title="4. 配置站点目录下的_config.yml对应配置"></a>4. 配置站点目录下的_config.yml对应配置</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">title</span><br>title: 我的小站<br>author: xxx<br>language: zh-CN<br>timezone: Asia/Shanghai<br><br>theme: fluid<br><br>deploy:<br>  type: &#x27;git&#x27;<br>  repo: git@github.com:bzqyzzld/bzqyzzld.github.io.git<br>  branch: main<br>  token: xxx        # token在用户头像-&gt; Settings -&gt; Developer settings -&gt; Personal access tokens -&gt; Tokens -&gt; Generate new token<br><br></code></pre></td></tr></table></figure><p>hexo的站点内容配置可以参考<a href="https://hexo.io/zh-cn/docs/configuration">链接</a></p><h1 id="5-hexo常用的命令"><a href="#5-hexo常用的命令" class="headerlink" title="5. hexo常用的命令"></a>5. hexo常用的命令</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">初始化相关的命令</span><br>hexo init proj_name   # 创建项目<br>cd proj_name<br>npm install<br><br>hexo  clean  # 清理缓存相关<br>hexo  server # 本地启动一个服务<br>hexo  generate  # 生成静态文件, 类似于 npm run build 一样<br>hexo  deploy  # 部署对应的代码到git或者对应的配置里边<br><br></code></pre></td></tr></table></figure><h1 id="6-fluid常用的配置-参考链接"><a href="#6-fluid常用的配置-参考链接" class="headerlink" title="6. fluid常用的配置, 参考链接"></a>6. fluid常用的配置, 参考<a href="https://fluid-dev.github.io/hexo-fluid-docs/guide/">链接</a></h1><h1 id="7-多台电脑的同步写文章"><a href="#7-多台电脑的同步写文章" class="headerlink" title="7. 多台电脑的同步写文章"></a>7. 多台电脑的同步写文章</h1><h2 id="首先在github上创建一个新的分支命名为hexo-resource-并且设置为默认分支，本地新建一个目录并且下载到本地"><a href="#首先在github上创建一个新的分支命名为hexo-resource-并且设置为默认分支，本地新建一个目录并且下载到本地" class="headerlink" title="首先在github上创建一个新的分支命名为hexo-resource,并且设置为默认分支，本地新建一个目录并且下载到本地"></a>首先在github上创建一个新的分支命名为hexo-resource,并且设置为默认分支，本地新建一个目录并且下载到本地</h2>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone git@github.com:bzqyzzld/bzqyzzld.github.io.git<br>cd bzqyzzld.github.io<br></code></pre></td></tr></table></figure><h2 id="1-删除-除去-git之外的所有文件，再把先前站点所有的文件都拷贝过来-记得不要-deploy-git目录-如果themes目录下的主题也有-git目录也需要删除"><a href="#1-删除-除去-git之外的所有文件，再把先前站点所有的文件都拷贝过来-记得不要-deploy-git目录-如果themes目录下的主题也有-git目录也需要删除" class="headerlink" title="1. 删除 除去.git之外的所有文件，再把先前站点所有的文件都拷贝过来, 记得不要.deploy_git目录, 如果themes目录下的主题也有.git目录也需要删除,"></a>1. 删除 除去.git之外的所有文件，再把先前站点所有的文件都拷贝过来, 记得不要.deploy_git目录, 如果themes目录下的主题也有.git目录也需要删除,</h2><h2 id="2-gitignore内容如下-还需要把-config-yml-中的token给去掉-防止泄密"><a href="#2-gitignore内容如下-还需要把-config-yml-中的token给去掉-防止泄密" class="headerlink" title="2. .gitignore内容如下, 还需要把 _config.yml 中的token给去掉, 防止泄密"></a>2. .gitignore内容如下, 还需要把 _config.yml 中的token给去掉, 防止泄密</h2>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">.DS_Store<br>Thumbs.db<br>db.json<br>*.log<br>node_modules/<br>public/<br>.deploy*/<br>_multiconfig.yml<br></code></pre></td></tr></table></figure>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git add .<br>git commit -m &quot;add hexo resource file&quot;<br>git push<br></code></pre></td></tr></table></figure><h2 id="3-新电脑直接拉取项目-然后愉快的写文章了"><a href="#3-新电脑直接拉取项目-然后愉快的写文章了" class="headerlink" title="3. 新电脑直接拉取项目,然后愉快的写文章了"></a>3. 新电脑直接拉取项目,然后愉快的写文章了</h2>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone git@github.com:bzqyzzld/bzqyzzld.github.io.git<br>cd bzqyzzld.github.io<br>npm install<br>npm install css --save<br><span class="hljs-meta prompt_"># </span><span class="language-bash">还需要修改_config.yml 中的token的配置</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
